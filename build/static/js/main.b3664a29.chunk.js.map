{"version":3,"sources":["api/unsplash.js","MyComponent/SearchBar.js","MyComponent/ImageCard.js","MyComponent/ImageList.js","MyComponent/Pagination.js","App.js","serviceWorker.js","index.js"],"names":["axios","create","baseURL","headers","Authorization","SearchBar","state","term","onFormSubmit","event","preventDefault","_this","props","onSubmit","_this2","this","react_default","a","createElement","className","htmlFor","type","value","onChange","e","setState","target","React","Component","ImageCard","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","setSpans","height","imageRef","current","clientHeight","spans","Math","ceil","createRef","addEventListener","_this$props$image","image","description","urls","style","gridRowEnd","concat","ref","src","regular","alt","ImageList","images","map","MyComponent_ImageCard","key","id","Pagination","searched","display","justifyContent","margin","onClick","onChangePage","currentPage","App","totalPages","searchWord","searchSubmit","_callee","page","response","regenerator_default","wrap","_context","prev","next","unsplash","get","params","query","per_page","sent","console","log","data","results","total_pages","stop","marginTop","MyComponent_SearchBar","MyComponent_Pagination","src_MyComponent_ImageList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b3664a29.chunk.js","sourcesContent":["import axios from 'axios'\n\nexport default axios.create({\n  baseURL: 'https://api.unsplash.com',\n  headers: {\n    Authorization: 'Client-ID 3a7bae7b0ed0b11f3f54334516b9547d28cea88f0b5a62d0224366c138bf1f7f'\n  }\n})","import React from 'react'\n\nclass SearchBar extends React.Component {\n  state = {\n    term: ''\n  };\n\n  onFormSubmit = (event) => {\n    event.preventDefault();\n\n    this.props.onSubmit(this.state.term, 1);\n  }\n\n  render () {\n    return (\n      <div className=\"ui segment\">\n        <form onSubmit={this.onFormSubmit} className=\"ui form\">\n          <div className=\"field\">\n            <label htmlFor=\"\">Image Search</label>\n            <input \n              type=\"text\"\n              value={this.state.term}\n              onChange={e => this.setState({ term: e.target.value})}\n            />\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default SearchBar","import React from 'react';\n\nclass ImageCard extends React.Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      spans: 0,\n    }\n\n    this.imageRef = React.createRef();\n  }\n\n  componentDidMount () {\n    this.imageRef.current.addEventListener('load', this.setSpans);\n  }\n\n  setSpans = () => {\n    const height = this.imageRef.current.clientHeight;\n\n    const spans = Math.ceil(height / 10 + 1);\n\n    this.setState({spans})\n  }\n  \n  \n  render () {\n    const {description, urls} = this.props.image;\n    \n    return (\n      <div style={{ gridRowEnd: `span ${this.state.spans}`}}>\n        <img ref={this.imageRef} src={urls.regular} alt={description} />\n      </div>\n    );\n  }\n}\n\nexport default ImageCard;","import './ImageList.css';\nimport React from 'react';\nimport ImageCard from './ImageCard'\n\n\n\nconst ImageList = (props) => {\n  const image = props.images.map((image) => {\n    return <ImageCard key={image.id} image={image} />\n  });\n\n  return (\n    <div className=\"image-list\">{ image }</div>\n  )\n};\n\nexport default ImageList;","import React from 'react';\n\nclass Pagination extends React.Component {\n\n\n  render () {\n    if (this.props.searched) {\n      return (\n        <div style={{display: 'flex',justifyContent: 'center',margin: '10px 0 20px 0'}}>\n          <div className=\"ui buttons\">\n            <button onClick={() => this.props.onChangePage(null, this.props.currentPage - 1)} className=\"ui button\">\n              <i className=\"left chevron icon\"></i>\n            </button>\n            <button onClick={() => this.props.onChangePage(null, this.props.currentPage + 1)} className=\"ui button\">\n              <i className=\"right chevron icon\"></i>\n            </button>\n          </div>\n        </div>\n      )\n    } else {\n      return (\n        <div></div>\n      )\n    }\n    \n  }\n}\n\nexport default Pagination;","import React, { Component } from 'react';\nimport './App.css';\nimport unsplash from '../src/api/unsplash'\nimport SearchBar from './MyComponent/SearchBar'\nimport ImageList from './MyComponent/ImageList'\nimport Pagination from './MyComponent/Pagination'\n\nclass App extends Component {\n  state = {\n    images: [],\n    currentPage: 1,\n    totalPages: 1,\n    searched: false,\n    searchWord: '',\n  };\n\n  searchSubmit = async (term, page) => {\n    const response = await unsplash.get('/search/photos',{\n      params: {\n        query: term || this.state.searchWord,\n        per_page: 30,\n        page: page\n      },\n    })\n    console.log(response.data)\n    this.setState({\n      images: response.data.results,\n      searched: true,\n      searchWord: term == null ? this.state.searchWord : term,\n      currentPage: page,\n      totalPages: response.data.total_pages,\n    })\n\n  }\n\n  render() {\n    return (\n      <div className=\"ui container\" style={{marginTop: '5vh'}}>\n        \n        { /* 搜尋 bar */ } \n        <SearchBar onSubmit={this.searchSubmit} />\n\n        { /* 上下頁 */ }\n        <Pagination\n          currentPage={this.state.currentPage}\n          totalPages={this.state.totalPages} \n          searched={this.state.searched} \n          onChangePage={this.searchSubmit}\n        />\n\n        { /* 圖片牆 */ }\n        <ImageList images={this.state.images} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}